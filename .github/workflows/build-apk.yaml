name: Build APK on Latest IRIS Tag

on:
  repository_dispatch:
    types: [build_apk]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout TransIRIS repo
        uses: actions/checkout@v4
        with:
          path: transiris-src

      - name: Checkout IRIS repo (default branch)
        uses: actions/checkout@v4
        with:
          repository: TransIRC/IRIS
          token: ${{ secrets.PAT }}
          path: iris-src

      - name: Checkout latest tag in IRIS and export as LATEST_TAG
        id: iris_tag
        run: |
          cd iris-src
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout "$latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Checked out $latest_tag"

      - name: Replace config.dart with TransIRIS version
        run: |
          cp ./transiris-src/config.dart ./iris-src/iris-app/iris/lib/config.dart

      - name: Create firebase_options.dart from secret
        run: |
          cat > ./iris-src/iris-app/iris/lib/firebase_options.dart <<EOF
          // File generated by FlutterFire CLI.
          // ignore_for_file: type=lint
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;

          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                throw UnsupportedError(
                  'DefaultFirebaseOptions have not been configured for web - '
                  'you can reconfigure this by running the FlutterFire CLI again.',
                );
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                case TargetPlatform.iOS:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for ios - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.macOS:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for macos - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.windows:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for windows - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.linux:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for linux - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }

            static const FirebaseOptions android = FirebaseOptions(
              apiKey: '${{ secrets.FIREBASE_API_KEY }}',
              appId: '1:1003710843441:android:a0c2a7d05bb6d35ac26310',
              messagingSenderId: '1003710843441',
              projectId: 'iris-6e0dd',
              storageBucket: 'iris-6e0dd.firebasestorage.app',
            );
          }
          EOF

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.4"

      - name: Build APK
        run: |
          cd iris-src/iris-app/iris
          flutter pub get
          flutter build apk --release

      - name: Copy APK to workspace root
        run: |
          cp iris-src/iris-app/iris/build/app/outputs/flutter-apk/app-release.apk .

      - name: Create GitHub Release and Upload APK
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.LATEST_TAG }}
          name: ${{ env.LATEST_TAG }}
          files: app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
